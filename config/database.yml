# SQLite. Versions 3.8.0 and up are supported.
#   gem install sqlite3
#
#   Ensure the SQLite 3 gem is defined in your Gemfile
#   gem "sqlite3"
#
# `Litesupport.root.join("data.sqlite3")` stores
# application data in the path `./db/#{Rails.env}/data.sqlite3`
#
# `Litesupport.root(env).join(path)` stores 
# application data in the path `./db/#{env}/#{path}`
#
# idle_timeout should be set to zero, to avoid recycling sqlite connections
# and losing the page cache
# 
default: &default
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  idle_timeout: 0

errors: &errors
  <<: *default
  migrations_paths: db/errors_migrate
  database: storage/<%= Rails.env %>-errors.sqlite3

cable: &cable
  <<: *default
  migrations_paths: db/cable_migrate
  database: storage/<%= Rails.env %>-cable.sqlite3

cache: &cache
  <<: *default
  migrations_paths: db/cache_migrate
  database: storage/<%= Rails.env %>-cache.sqlite3

queue: &queue
  <<: *default
  migrations_paths: db/queue_migrate
  database: storage/<%= Rails.env %>-queue.sqlite3

development:
  primary:
    <<: *default
    database: storage/development.sqlite3
  queue: *queue
  cache: *cache
  cable: *cable
  errors: *errors

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  primary:
    <<: *default
    database: storage/test.sqlite3
  queue: *queue
  cache: *cache
  cable: *cable

# Warning: Make sure your production database path is on a persistent
# volume, otherwise your application data could be deleted between deploys.
#
# You may also set the Litesupport.root in production via the
# `LITESTACK_DATA_PATH` environment variable.
production:
  primary:
    <<: *default
    database: storage/production.sqlite3
  queue: *queue
  cache: *cache
  cable: *cable
  errors: *errors

